
Microweek5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000544  000005d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000544  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010e  0080010e  000005e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000618  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ff3  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092a  00000000  00000000  000016e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000066f  00000000  00000000  00002011  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00002680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000554  00000000  00000000  000028a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004aa  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000032a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	21 c1       	rjmp	.+578    	; 0x248 <__vector_1>
   6:	00 00       	nop
   8:	7f c1       	rjmp	.+766    	; 0x308 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	e5 c1       	rjmp	.+970    	; 0x3fc <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e4       	ldi	r30, 0x44	; 68
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	9b d0       	rcall	.+310    	; 0x1fa <main>
  c4:	3d c2       	rjmp	.+1146   	; 0x540 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <wait>:
void displayOff()
{
 spi_slaveSelect(0); // Select display chip
 spi_write(0x0C); // Register 0B: Shutdown register
 spi_write(0x00); // -> 1 = Normal operation
 spi_slaveDeSelect(0); // Deselect display chip
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	6c f4       	brge	.+26     	; 0xe8 <wait+0x20>
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	e9 ef       	ldi	r30, 0xF9	; 249
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <wait+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <wait+0x14>
  dc:	00 00       	nop
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	82 17       	cp	r24, r18
  e4:	93 07       	cpc	r25, r19
  e6:	a9 f7       	brne	.-22     	; 0xd2 <wait+0xa>
  e8:	08 95       	ret

000000ea <spi_masterInit>:
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	87 bb       	out	0x17, r24	; 23
  ee:	bb 98       	cbi	0x17, 3	; 23
  f0:	c0 9a       	sbi	0x18, 0	; 24
  f2:	82 e5       	ldi	r24, 0x52	; 82
  f4:	8d b9       	out	0x0d, r24	; 13
  f6:	08 95       	ret

000000f8 <spi_write>:
  f8:	8f b9       	out	0x0f, r24	; 15
  fa:	77 9b       	sbis	0x0e, 7	; 14
  fc:	fe cf       	rjmp	.-4      	; 0xfa <spi_write+0x2>
  fe:	08 95       	ret

00000100 <spi_slaveSelect>:
 100:	98 b3       	in	r25, 0x18	; 24
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <spi_slaveSelect+0xc>
 108:	22 0f       	add	r18, r18
 10a:	33 1f       	adc	r19, r19
 10c:	8a 95       	dec	r24
 10e:	e2 f7       	brpl	.-8      	; 0x108 <spi_slaveSelect+0x8>
 110:	20 95       	com	r18
 112:	29 23       	and	r18, r25
 114:	28 bb       	out	0x18, r18	; 24
 116:	08 95       	ret

00000118 <spi_slaveDeSelect>:
 118:	98 b3       	in	r25, 0x18	; 24
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <spi_slaveDeSelect+0xc>
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	8a 95       	dec	r24
 126:	e2 f7       	brpl	.-8      	; 0x120 <spi_slaveDeSelect+0x8>
 128:	29 2b       	or	r18, r25
 12a:	28 bb       	out	0x18, r18	; 24
 12c:	08 95       	ret

0000012e <displayDriverInit>:
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	e7 df       	rcall	.-50     	; 0x100 <spi_slaveSelect>
 132:	89 e0       	ldi	r24, 0x09	; 9
 134:	e1 df       	rcall	.-62     	; 0xf8 <spi_write>
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	df df       	rcall	.-66     	; 0xf8 <spi_write>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	ed df       	rcall	.-38     	; 0x118 <spi_slaveDeSelect>
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	df df       	rcall	.-66     	; 0x100 <spi_slaveSelect>
 142:	8a e0       	ldi	r24, 0x0A	; 10
 144:	d9 df       	rcall	.-78     	; 0xf8 <spi_write>
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	d7 df       	rcall	.-82     	; 0xf8 <spi_write>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	e5 df       	rcall	.-54     	; 0x118 <spi_slaveDeSelect>
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	d7 df       	rcall	.-82     	; 0x100 <spi_slaveSelect>
 152:	8b e0       	ldi	r24, 0x0B	; 11
 154:	d1 df       	rcall	.-94     	; 0xf8 <spi_write>
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	cf df       	rcall	.-98     	; 0xf8 <spi_write>
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	dd df       	rcall	.-70     	; 0x118 <spi_slaveDeSelect>
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	cf df       	rcall	.-98     	; 0x100 <spi_slaveSelect>
 162:	8c e0       	ldi	r24, 0x0C	; 12
 164:	c9 df       	rcall	.-110    	; 0xf8 <spi_write>
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	c7 df       	rcall	.-114    	; 0xf8 <spi_write>
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	d5 cf       	rjmp	.-86     	; 0x118 <spi_slaveDeSelect>
 16e:	08 95       	ret

00000170 <spi_writeWord>:
}

 return (1);
}

void spi_writeWord(unsigned char adress, unsigned char data){
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	d8 2f       	mov	r29, r24
 176:	c6 2f       	mov	r28, r22
	spi_slaveSelect(0); // Select display chip
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	c2 df       	rcall	.-124    	; 0x100 <spi_slaveSelect>
	spi_write(adress); // digit adress: (digit place)
 17c:	8d 2f       	mov	r24, r29
 17e:	bc df       	rcall	.-136    	; 0xf8 <spi_write>
	spi_write(data); // digit value: i (= digit place)
 180:	8c 2f       	mov	r24, r28
 182:	ba df       	rcall	.-140    	; 0xf8 <spi_write>
	spi_slaveDeSelect(0); // Deselect display chip
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	c8 df       	rcall	.-112    	; 0x118 <spi_slaveDeSelect>
	wait(10);
 188:	8a e0       	ldi	r24, 0x0A	; 10
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	9d df       	rcall	.-198    	; 0xc8 <wait>
 18e:	df 91       	pop	r29
}
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <writeLedDisplay>:
 194:	ef 92       	push	r14

void writeLedDisplay(int value, int startpos){
 196:	ff 92       	push	r15
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	c6 2f       	mov	r28, r22
	int i = 1;
	int pos = startpos;
	if(value == 0){
 1a0:	00 97       	sbiw	r24, 0x00	; 0
 1a2:	21 f4       	brne	.+8      	; 0x1ac <writeLedDisplay+0x18>
		spi_writeWord(pos, value);
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	8c 2f       	mov	r24, r28
 1a8:	e3 df       	rcall	.-58     	; 0x170 <spi_writeWord>
 1aa:	15 c0       	rjmp	.+42     	; 0x1d6 <writeLedDisplay+0x42>
	}
	while (value > 0) {
 1ac:	18 16       	cp	r1, r24
 1ae:	19 06       	cpc	r1, r25
 1b0:	94 f4       	brge	.+36     	; 0x1d6 <writeLedDisplay+0x42>
		int digit = value % 10;
		spi_writeWord(pos, digit);
 1b2:	0f 2e       	mov	r0, r31
 1b4:	fa e0       	ldi	r31, 0x0A	; 10
 1b6:	ef 2e       	mov	r14, r31
 1b8:	f1 2c       	mov	r15, r1
 1ba:	f0 2d       	mov	r31, r0
 1bc:	b7 01       	movw	r22, r14
 1be:	99 d1       	rcall	.+818    	; 0x4f2 <__divmodhi4>
 1c0:	16 2f       	mov	r17, r22
 1c2:	d7 2f       	mov	r29, r23
 1c4:	68 2f       	mov	r22, r24
 1c6:	8c 2f       	mov	r24, r28
 1c8:	d3 df       	rcall	.-90     	; 0x170 <spi_writeWord>
		value /= 10;
 1ca:	81 2f       	mov	r24, r17
 1cc:	9d 2f       	mov	r25, r29
 1ce:	cf 5f       	subi	r28, 0xFF	; 255
	int i = 1;
	int pos = startpos;
	if(value == 0){
		spi_writeWord(pos, value);
	}
	while (value > 0) {
 1d0:	18 16       	cp	r1, r24
 1d2:	19 06       	cpc	r1, r25
 1d4:	9c f3       	brlt	.-26     	; 0x1bc <writeLedDisplay+0x28>
		i++;
		pos++;
	}
	
	
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	08 95       	ret

000001e2 <timer1Init>:

void timer1Init(void){
	OCR1A = 31500; // 16-bits compare value of counter 1
 1e2:	8c e0       	ldi	r24, 0x0C	; 12
 1e4:	9b e7       	ldi	r25, 0x7B	; 123
 1e6:	9b bd       	out	0x2b, r25	; 43
 1e8:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= BIT(4); // T1 compare match A interrupt enable
 1ea:	87 b7       	in	r24, 0x37	; 55
 1ec:	80 61       	ori	r24, 0x10	; 16
 1ee:	87 bf       	out	0x37, r24	; 55
	TCCR1A = 0b00000000; // Initialize T1: timer, prescaler=256,
 1f0:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001100; // compare output disconnected, CTC, RUN
 1f2:	8c e0       	ldi	r24, 0x0C	; 12
 1f4:	8e bd       	out	0x2e, r24	; 46
	sei();
 1f6:	78 94       	sei
 1f8:	08 95       	ret

000001fa <main>:
 spi_slaveDeSelect(0); // Deselect display chip
}

int main()
{
DDRB=0x01; // Set PB0 pin as output for display select
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	87 bb       	out	0x17, r24	; 23
DDRC = 0xFF;
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	84 bb       	out	0x14, r24	; 20
DDRD = 0xFF;
 202:	81 bb       	out	0x11, r24	; 17
DDRD &= ~(1 << PIND1);
 204:	89 98       	cbi	0x11, 1	; 17
DDRD &= ~(1 << PIND0);
 206:	88 98       	cbi	0x11, 0	; 17

EICRA = 0x0B;
 208:	8b e0       	ldi	r24, 0x0B	; 11
 20a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
EIMSK = 0x03;
 20e:	83 e0       	ldi	r24, 0x03	; 3
 210:	89 bf       	out	0x39, r24	; 57

timer1Init();
 212:	e7 df       	rcall	.-50     	; 0x1e2 <timer1Init>
spi_masterInit(); // Initialize spi module
 214:	6a df       	rcall	.-300    	; 0xea <spi_masterInit>
displayDriverInit(); // Initialize display chip
 216:	8b df       	rcall	.-234    	; 0x12e <displayDriverInit>
// clear display (all zero's)
for (char i =1; i<=4; i++)
 218:	c1 e0       	ldi	r28, 0x01	; 1
{
	spi_slaveSelect(0); // Select display chip
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	71 df       	rcall	.-286    	; 0x100 <spi_slaveSelect>
	spi_write(i); // digit adress: (digit place)
 21e:	8c 2f       	mov	r24, r28
 220:	6b df       	rcall	.-298    	; 0xf8 <spi_write>
	spi_write(0); // digit value: 0
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	69 df       	rcall	.-302    	; 0xf8 <spi_write>
 226:	80 e0       	ldi	r24, 0x00	; 0
	spi_slaveDeSelect(0); // Deselect display chip
 228:	77 df       	rcall	.-274    	; 0x118 <spi_slaveDeSelect>
 22a:	cf 5f       	subi	r28, 0xFF	; 255

timer1Init();
spi_masterInit(); // Initialize spi module
displayDriverInit(); // Initialize display chip
// clear display (all zero's)
for (char i =1; i<=4; i++)
 22c:	c5 30       	cpi	r28, 0x05	; 5
 22e:	a9 f7       	brne	.-22     	; 0x21a <main+0x20>
	spi_write(i); // digit adress: (digit place)
	spi_write(0); // digit value: 0
	spi_slaveDeSelect(0); // Deselect display chip
}
// set first dot for hours
spi_slaveSelect(0); // Select display chip
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	66 df       	rcall	.-308    	; 0x100 <spi_slaveSelect>
spi_write(3); // digit adress: (digit place)
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	60 df       	rcall	.-320    	; 0xf8 <spi_write>
spi_write(NumbersDotted[0]); // digit value: 0
 238:	80 e8       	ldi	r24, 0x80	; 128
 23a:	5e df       	rcall	.-324    	; 0xf8 <spi_write>
 23c:	80 e0       	ldi	r24, 0x00	; 0
spi_slaveDeSelect(0); // Deselect display chip
 23e:	6c df       	rcall	.-296    	; 0x118 <spi_slaveDeSelect>
 240:	8a e0       	ldi	r24, 0x0A	; 10
 242:	90 e0       	ldi	r25, 0x00	; 0

while(1){
	wait(10);
 244:	41 df       	rcall	.-382    	; 0xc8 <wait>
 246:	fc cf       	rjmp	.-8      	; 0x240 <main+0x46>

00000248 <__vector_1>:
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
			}
		}
	}
}

ISR(INT0_vect){
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	0b b6       	in	r0, 0x3b	; 59
 254:	0f 92       	push	r0
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	if(stateMinutes == 1){
 26e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 272:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	a1 f5       	brne	.+104    	; 0x2e2 <__vector_1+0x9a>
		stateMinutes = 0;
 27a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 27e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		minutes++;
 282:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <minutes>
 286:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <minutes+0x1>
 28a:	01 96       	adiw	r24, 0x01	; 1
		if(minutes >=60){
 28c:	8c 33       	cpi	r24, 0x3C	; 60
 28e:	91 05       	cpc	r25, r1
 290:	2c f4       	brge	.+10     	; 0x29c <__vector_1+0x54>
}

ISR(INT0_vect){
	if(stateMinutes == 1){
		stateMinutes = 0;
		minutes++;
 292:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <minutes+0x1>
 296:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <minutes>
 29a:	09 c0       	rjmp	.+18     	; 0x2ae <__vector_1+0x66>
		if(minutes >=60){
			minutes = 0;
 29c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <minutes+0x1>
 2a0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <minutes>
			writeLedDisplay(0,2);
 2a4:	62 e0       	ldi	r22, 0x02	; 2
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	73 df       	rcall	.-282    	; 0x194 <writeLedDisplay>
		}
		writeLedDisplay(minutes,1);
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <minutes>
 2b6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <minutes+0x1>
 2ba:	6c df       	rcall	.-296    	; 0x194 <writeLedDisplay>
		spi_writeWord(1, NumbersDotted[minutes%10]);
 2bc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <minutes>
 2c0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <minutes+0x1>
 2c4:	6a e0       	ldi	r22, 0x0A	; 10
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	14 d1       	rcall	.+552    	; 0x4f2 <__divmodhi4>
 2ca:	fc 01       	movw	r30, r24
 2cc:	ec 5f       	subi	r30, 0xFC	; 252
 2ce:	fe 4f       	sbci	r31, 0xFE	; 254
 2d0:	60 81       	ld	r22, Z
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	4d df       	rcall	.-358    	; 0x170 <spi_writeWord>
		
		stateMinutes = 1;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
}
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	bf 91       	pop	r27
 2e8:	af 91       	pop	r26
 2ea:	9f 91       	pop	r25
 2ec:	8f 91       	pop	r24
 2ee:	7f 91       	pop	r23
 2f0:	6f 91       	pop	r22
 2f2:	5f 91       	pop	r21
 2f4:	4f 91       	pop	r20
 2f6:	3f 91       	pop	r19
 2f8:	2f 91       	pop	r18
 2fa:	0f 90       	pop	r0
 2fc:	0b be       	out	0x3b, r0	; 59
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <__vector_2>:


ISR( INT1_vect )
{
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	0b b6       	in	r0, 0x3b	; 59
 314:	0f 92       	push	r0
 316:	2f 93       	push	r18
 318:	3f 93       	push	r19
 31a:	4f 93       	push	r20
 31c:	5f 93       	push	r21
 31e:	6f 93       	push	r22
 320:	7f 93       	push	r23
 322:	8f 93       	push	r24
 324:	9f 93       	push	r25
 326:	af 93       	push	r26
 328:	bf 93       	push	r27
 32a:	ef 93       	push	r30
 32c:	ff 93       	push	r31
	if(stateHours == 1){
 32e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <stateHours>
 332:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <stateHours+0x1>
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	a1 f5       	brne	.+104    	; 0x3a2 <__vector_2+0x9a>
		stateHours = 0;
 33a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <stateHours+0x1>
 33e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <stateHours>
		hours++;
 342:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 346:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 34a:	01 96       	adiw	r24, 0x01	; 1
		if(hours >=24){
 34c:	88 31       	cpi	r24, 0x18	; 24
 34e:	91 05       	cpc	r25, r1
 350:	2c f4       	brge	.+10     	; 0x35c <__vector_2+0x54>

ISR( INT1_vect )
{
	if(stateHours == 1){
		stateHours = 0;
		hours++;
 352:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
 356:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 35a:	09 c0       	rjmp	.+18     	; 0x36e <__vector_2+0x66>
		if(hours >=24){
			hours = 0;
 35c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
 360:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
			writeLedDisplay(0,4);
 364:	64 e0       	ldi	r22, 0x04	; 4
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	13 df       	rcall	.-474    	; 0x194 <writeLedDisplay>
		}
		writeLedDisplay(hours,3);
 36e:	63 e0       	ldi	r22, 0x03	; 3
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 376:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 37a:	0c df       	rcall	.-488    	; 0x194 <writeLedDisplay>
		spi_writeWord(3, NumbersDotted[hours%10]);
 37c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 380:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 384:	6a e0       	ldi	r22, 0x0A	; 10
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	b4 d0       	rcall	.+360    	; 0x4f2 <__divmodhi4>
 38a:	fc 01       	movw	r30, r24
 38c:	ec 5f       	subi	r30, 0xFC	; 252
 38e:	fe 4f       	sbci	r31, 0xFE	; 254
 390:	60 81       	ld	r22, Z
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	ed de       	rcall	.-550    	; 0x170 <spi_writeWord>
		stateHours = 1;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <stateHours+0x1>
 39e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <stateHours>
		
	}
}
 3a2:	ff 91       	pop	r31
 3a4:	ef 91       	pop	r30
 3a6:	bf 91       	pop	r27
 3a8:	af 91       	pop	r26
 3aa:	9f 91       	pop	r25
 3ac:	8f 91       	pop	r24
 3ae:	7f 91       	pop	r23
 3b0:	6f 91       	pop	r22
 3b2:	5f 91       	pop	r21
 3b4:	4f 91       	pop	r20
 3b6:	3f 91       	pop	r19
 3b8:	2f 91       	pop	r18
 3ba:	0f 90       	pop	r0
 3bc:	0b be       	out	0x3b, r0	; 59
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <toggleSeconds>:

void toggleSeconds(void){
	if(sCount%2 == 0){
 3c8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <sCount>
 3cc:	80 fd       	sbrc	r24, 0
 3ce:	08 c0       	rjmp	.+16     	; 0x3e0 <toggleSeconds+0x18>
		writeLedDisplay(minutes,1);
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <minutes>
 3d8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <minutes+0x1>
 3dc:	db ce       	rjmp	.-586    	; 0x194 <writeLedDisplay>
 3de:	08 95       	ret
	}else{
		spi_writeWord(1, NumbersDotted[minutes%10]);
 3e0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <minutes>
 3e4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <minutes+0x1>
 3e8:	6a e0       	ldi	r22, 0x0A	; 10
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	82 d0       	rcall	.+260    	; 0x4f2 <__divmodhi4>
 3ee:	fc 01       	movw	r30, r24
 3f0:	ec 5f       	subi	r30, 0xFC	; 252
 3f2:	fe 4f       	sbci	r31, 0xFE	; 254
 3f4:	60 81       	ld	r22, Z
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	bb ce       	rjmp	.-650    	; 0x170 <spi_writeWord>
 3fa:	08 95       	ret

000003fc <__vector_12>:

int sCount = 0;
int minutes = 0;
int hours = 0;

ISR(TIMER1_COMPA_vect){
 3fc:	1f 92       	push	r1
 3fe:	0f 92       	push	r0
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	0f 92       	push	r0
 404:	11 24       	eor	r1, r1
 406:	0b b6       	in	r0, 0x3b	; 59
 408:	0f 92       	push	r0
 40a:	2f 93       	push	r18
 40c:	3f 93       	push	r19
 40e:	4f 93       	push	r20
 410:	5f 93       	push	r21
 412:	6f 93       	push	r22
 414:	7f 93       	push	r23
 416:	8f 93       	push	r24
 418:	9f 93       	push	r25
 41a:	af 93       	push	r26
 41c:	bf 93       	push	r27
 41e:	ef 93       	push	r30
 420:	ff 93       	push	r31
	sCount++; // Increment s counter
 422:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <sCount>
 426:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <sCount+0x1>
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <sCount+0x1>
 430:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <sCount>
	toggleSeconds();
 434:	c9 df       	rcall	.-110    	; 0x3c8 <toggleSeconds>
	PORTC ^= BIT(0); // Toggle bit 0 van PORTC
 436:	95 b3       	in	r25, 0x15	; 21
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	89 27       	eor	r24, r25
 43c:	85 bb       	out	0x15, r24	; 21
	if ( sCount == 60 ) // Every 1 minute:
 43e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <sCount>
 442:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <sCount+0x1>
 446:	cc 97       	sbiw	r24, 0x3c	; 60
 448:	09 f0       	breq	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44a:	40 c0       	rjmp	.+128    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
	{ //
		minutes++; // Increment minutes counter
 44c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <minutes>
 450:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <minutes+0x1>
 454:	01 96       	adiw	r24, 0x01	; 1
 456:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <minutes+0x1>
 45a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <minutes>
		//writeLedDisplay(minutes,1);
		sCount = 0; // Reset s-counter
 45e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <sCount+0x1>
 462:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <sCount>
		if ( minutes >= 60 ) // Every hour:
 466:	cc 97       	sbiw	r24, 0x3c	; 60
 468:	8c f1       	brlt	.+98     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		{ //
			minutes = 0; // Reset min-counter
 46a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <minutes+0x1>
 46e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <minutes>
			writeLedDisplay(0,2);
 472:	62 e0       	ldi	r22, 0x02	; 2
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	8c de       	rcall	.-744    	; 0x194 <writeLedDisplay>
			hours++; // Increment hours counter
 47c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 480:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 484:	01 96       	adiw	r24, 0x01	; 1
 486:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
 48a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			writeLedDisplay(hours,3);
 48e:	63 e0       	ldi	r22, 0x03	; 3
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	80 de       	rcall	.-768    	; 0x194 <writeLedDisplay>
			spi_writeWord(3, NumbersDotted[hours%10]);
 494:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 498:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 49c:	6a e0       	ldi	r22, 0x0A	; 10
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	28 d0       	rcall	.+80     	; 0x4f2 <__divmodhi4>
 4a2:	fc 01       	movw	r30, r24
 4a4:	ec 5f       	subi	r30, 0xFC	; 252
 4a6:	fe 4f       	sbci	r31, 0xFE	; 254
 4a8:	60 81       	ld	r22, Z
 4aa:	83 e0       	ldi	r24, 0x03	; 3
 4ac:	61 de       	rcall	.-830    	; 0x170 <spi_writeWord>
			if ( hours >= 24 ){ // Every day:
 4ae:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 4b2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 4b6:	48 97       	sbiw	r24, 0x18	; 24
 4b8:	4c f0       	brlt	.+18     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
				hours = 0; // reset hours counter
 4ba:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
 4be:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
				writeLedDisplay(0,4);
 4c2:	64 e0       	ldi	r22, 0x04	; 4
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	64 de       	rcall	.-824    	; 0x194 <writeLedDisplay>
			}
		}
	}
}
 4cc:	ff 91       	pop	r31
 4ce:	ef 91       	pop	r30
 4d0:	bf 91       	pop	r27
 4d2:	af 91       	pop	r26
 4d4:	9f 91       	pop	r25
 4d6:	8f 91       	pop	r24
 4d8:	7f 91       	pop	r23
 4da:	6f 91       	pop	r22
 4dc:	5f 91       	pop	r21
 4de:	4f 91       	pop	r20
 4e0:	3f 91       	pop	r19
 4e2:	2f 91       	pop	r18
 4e4:	0f 90       	pop	r0
 4e6:	0b be       	out	0x3b, r0	; 59
 4e8:	0f 90       	pop	r0
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	0f 90       	pop	r0
 4ee:	1f 90       	pop	r1
 4f0:	18 95       	reti

000004f2 <__divmodhi4>:
 4f2:	97 fb       	bst	r25, 7
 4f4:	07 2e       	mov	r0, r23
 4f6:	16 f4       	brtc	.+4      	; 0x4fc <__divmodhi4+0xa>
 4f8:	00 94       	com	r0
 4fa:	06 d0       	rcall	.+12     	; 0x508 <__divmodhi4_neg1>
 4fc:	77 fd       	sbrc	r23, 7
 4fe:	08 d0       	rcall	.+16     	; 0x510 <__divmodhi4_neg2>
 500:	0b d0       	rcall	.+22     	; 0x518 <__udivmodhi4>
 502:	07 fc       	sbrc	r0, 7
 504:	05 d0       	rcall	.+10     	; 0x510 <__divmodhi4_neg2>
 506:	3e f4       	brtc	.+14     	; 0x516 <__divmodhi4_exit>

00000508 <__divmodhi4_neg1>:
 508:	90 95       	com	r25
 50a:	81 95       	neg	r24
 50c:	9f 4f       	sbci	r25, 0xFF	; 255
 50e:	08 95       	ret

00000510 <__divmodhi4_neg2>:
 510:	70 95       	com	r23
 512:	61 95       	neg	r22
 514:	7f 4f       	sbci	r23, 0xFF	; 255

00000516 <__divmodhi4_exit>:
 516:	08 95       	ret

00000518 <__udivmodhi4>:
 518:	aa 1b       	sub	r26, r26
 51a:	bb 1b       	sub	r27, r27
 51c:	51 e1       	ldi	r21, 0x11	; 17
 51e:	07 c0       	rjmp	.+14     	; 0x52e <__udivmodhi4_ep>

00000520 <__udivmodhi4_loop>:
 520:	aa 1f       	adc	r26, r26
 522:	bb 1f       	adc	r27, r27
 524:	a6 17       	cp	r26, r22
 526:	b7 07       	cpc	r27, r23
 528:	10 f0       	brcs	.+4      	; 0x52e <__udivmodhi4_ep>
 52a:	a6 1b       	sub	r26, r22
 52c:	b7 0b       	sbc	r27, r23

0000052e <__udivmodhi4_ep>:
 52e:	88 1f       	adc	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	5a 95       	dec	r21
 534:	a9 f7       	brne	.-22     	; 0x520 <__udivmodhi4_loop>
 536:	80 95       	com	r24
 538:	90 95       	com	r25
 53a:	bc 01       	movw	r22, r24
 53c:	cd 01       	movw	r24, r26
 53e:	08 95       	ret

00000540 <_exit>:
 540:	f8 94       	cli

00000542 <__stop_program>:
 542:	ff cf       	rjmp	.-2      	; 0x542 <__stop_program>
