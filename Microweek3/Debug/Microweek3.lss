
Microweek3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000252  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000252  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800106  00800106  000002ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cbb  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d0  00000000  00000000  0000107b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e1  00000000  00000000  0000194b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a5  00000000  00000000  00001f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d1  00000000  00000000  00002409  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000027da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	cc c0       	rjmp	.+408    	; 0x1c2 <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e5       	ldi	r30, 0x52	; 82
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 30       	cpi	r26, 0x08	; 8
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b3 d0       	rcall	.+358    	; 0x22a <main>
  c4:	c4 c0       	rjmp	.+392    	; 0x24e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_strobe_lcd_e>:
	for(i = 0; i < pos; i++){
		lcd_write_command(0x14);
		lcd_strobe_lcd_e();
	}
	lcd_write_string(*str);
}
  c8:	ab 9a       	sbi	0x15, 3	; 21
  ca:	89 ef       	ldi	r24, 0xF9	; 249
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_strobe_lcd_e+0x6>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <lcd_strobe_lcd_e+0xc>
  d4:	00 00       	nop
  d6:	ab 98       	cbi	0x15, 3	; 21
  d8:	89 ef       	ldi	r24, 0xF9	; 249
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_strobe_lcd_e+0x14>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <lcd_strobe_lcd_e+0x1a>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <wait>:
  e6:	18 16       	cp	r1, r24
  e8:	19 06       	cpc	r1, r25
  ea:	6c f4       	brge	.+26     	; 0x106 <wait+0x20>
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	e9 ef       	ldi	r30, 0xF9	; 249
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <wait+0xe>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <wait+0x14>
  fa:	00 00       	nop
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	82 17       	cp	r24, r18
 102:	93 07       	cpc	r25, r19
 104:	a9 f7       	brne	.-22     	; 0xf0 <wait+0xa>
 106:	08 95       	ret

00000108 <lcd_write_data>:
 108:	cf 93       	push	r28
 10a:	c8 2f       	mov	r28, r24
 10c:	85 bb       	out	0x15, r24	; 21
 10e:	aa 9a       	sbi	0x15, 2	; 21
 110:	db df       	rcall	.-74     	; 0xc8 <lcd_strobe_lcd_e>
 112:	c2 95       	swap	r28
 114:	c0 7f       	andi	r28, 0xF0	; 240
 116:	c5 bb       	out	0x15, r28	; 21
 118:	aa 9a       	sbi	0x15, 2	; 21
 11a:	d6 df       	rcall	.-84     	; 0xc8 <lcd_strobe_lcd_e>
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <lcd_write_command>:
 120:	cf 93       	push	r28
 122:	c8 2f       	mov	r28, r24
 124:	85 bb       	out	0x15, r24	; 21
 126:	aa 98       	cbi	0x15, 2	; 21
 128:	cf df       	rcall	.-98     	; 0xc8 <lcd_strobe_lcd_e>
 12a:	c2 95       	swap	r28
 12c:	c0 7f       	andi	r28, 0xF0	; 240
 12e:	c5 bb       	out	0x15, r28	; 21
 130:	aa 98       	cbi	0x15, 2	; 21
 132:	ca df       	rcall	.-108    	; 0xc8 <lcd_strobe_lcd_e>
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <init_4bits_mode>:
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	84 bb       	out	0x14, r24	; 20
 13c:	15 ba       	out	0x15, r1	; 21
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	ee df       	rcall	.-36     	; 0x120 <lcd_write_command>
 144:	c1 df       	rcall	.-126    	; 0xc8 <lcd_strobe_lcd_e>
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ea df       	rcall	.-44     	; 0x120 <lcd_write_command>
 14c:	bd df       	rcall	.-134    	; 0xc8 <lcd_strobe_lcd_e>
 14e:	80 e2       	ldi	r24, 0x20	; 32
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	e6 df       	rcall	.-52     	; 0x120 <lcd_write_command>
 154:	b9 df       	rcall	.-142    	; 0xc8 <lcd_strobe_lcd_e>
 156:	80 e2       	ldi	r24, 0x20	; 32
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	e2 df       	rcall	.-60     	; 0x120 <lcd_write_command>
 15c:	b5 df       	rcall	.-150    	; 0xc8 <lcd_strobe_lcd_e>
 15e:	80 e8       	ldi	r24, 0x80	; 128
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	de df       	rcall	.-68     	; 0x120 <lcd_write_command>
 164:	b1 df       	rcall	.-158    	; 0xc8 <lcd_strobe_lcd_e>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	da df       	rcall	.-76     	; 0x120 <lcd_write_command>
 16c:	ad df       	rcall	.-166    	; 0xc8 <lcd_strobe_lcd_e>
 16e:	80 ef       	ldi	r24, 0xF0	; 240
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	d6 df       	rcall	.-84     	; 0x120 <lcd_write_command>
 174:	a9 df       	rcall	.-174    	; 0xc8 <lcd_strobe_lcd_e>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	d2 df       	rcall	.-92     	; 0x120 <lcd_write_command>
 17c:	a5 df       	rcall	.-182    	; 0xc8 <lcd_strobe_lcd_e>
 17e:	80 e6       	ldi	r24, 0x60	; 96
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	ce df       	rcall	.-100    	; 0x120 <lcd_write_command>
 184:	a1 cf       	rjmp	.-190    	; 0xc8 <lcd_strobe_lcd_e>
 186:	08 95       	ret

00000188 <lcd_write_string>:
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	ec 01       	movw	r28, r24
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	c6 df       	rcall	.-116    	; 0x120 <lcd_write_command>
 194:	99 df       	rcall	.-206    	; 0xc8 <lcd_strobe_lcd_e>
 196:	88 81       	ld	r24, Y
 198:	88 23       	and	r24, r24
 19a:	29 f0       	breq	.+10     	; 0x1a6 <lcd_write_string+0x1e>
 19c:	21 96       	adiw	r28, 0x01	; 1
 19e:	b4 df       	rcall	.-152    	; 0x108 <lcd_write_data>
 1a0:	89 91       	ld	r24, Y+
 1a2:	81 11       	cpse	r24, r1
 1a4:	fc cf       	rjmp	.-8      	; 0x19e <lcd_write_string+0x16>
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <timer2Init>:
 1ac:	86 ef       	ldi	r24, 0xF6	; 246
 1ae:	84 bd       	out	0x24, r24	; 36
 1b0:	87 b7       	in	r24, 0x37	; 55
 1b2:	82 60       	ori	r24, 0x02	; 2
 1b4:	87 bf       	out	0x37, r24	; 55
 1b6:	8f b7       	in	r24, 0x3f	; 63
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	8f bf       	out	0x3f, r24	; 63
 1bc:	87 e0       	ldi	r24, 0x07	; 7
 1be:	85 bd       	out	0x25, r24	; 37
 1c0:	08 95       	ret

000001c2 <__vector_10>:
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	0b b6       	in	r0, 0x3b	; 59
 1ce:	0f 92       	push	r0
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
 1d8:	6f 93       	push	r22
 1da:	7f 93       	push	r23
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	af 93       	push	r26
 1e2:	bf 93       	push	r27
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
 1e8:	86 ef       	ldi	r24, 0xF6	; 246
 1ea:	84 bd       	out	0x24, r24	; 36
 1ec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 1f0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 1fa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	c2 df       	rcall	.-124    	; 0x188 <lcd_write_string>
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	7f 91       	pop	r23
 212:	6f 91       	pop	r22
 214:	5f 91       	pop	r21
 216:	4f 91       	pop	r20
 218:	3f 91       	pop	r19
 21a:	2f 91       	pop	r18
 21c:	0f 90       	pop	r0
 21e:	0b be       	out	0x3b, r0	; 59
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <main>:
notes:			Slow background task after init ISR
Version :    	DMK, Initial code
*******************************************************************/
{
	
	DDRD &= 0x01; // set PORTD.7 for input
 22a:	81 b3       	in	r24, 0x11	; 17
 22c:	81 70       	andi	r24, 0x01	; 1
 22e:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xFF; // PORTB is output
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;
 234:	8a bb       	out	0x1a, r24	; 26
	
	init_4bits_mode();
 236:	80 df       	rcall	.-256    	; 0x138 <init_4bits_mode>
	
	timer2Init();
 238:	b9 df       	rcall	.-142    	; 0x1ac <timer2Init>
 23a:	c6 e0       	ldi	r28, 0x06	; 6

	// Loop forever
	while (1)
	{	
		PORTA = TCNT2; // show value counter 2
		PORTB = tenthValue; // show value tenth counter
 23c:	d1 e0       	ldi	r29, 0x01	; 1
 23e:	84 b5       	in	r24, 0x24	; 36
	//lcd_write_at(2, "1234567");

	// Loop forever
	while (1)
	{	
		PORTA = TCNT2; // show value counter 2
 240:	8b bb       	out	0x1b, r24	; 27
 242:	88 81       	ld	r24, Y
		PORTB = tenthValue; // show value tenth counter
 244:	88 bb       	out	0x18, r24	; 24
 246:	8a e0       	ldi	r24, 0x0A	; 10
		wait(10);
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	4d df       	rcall	.-358    	; 0xe6 <wait>
 24c:	f8 cf       	rjmp	.-16     	; 0x23e <main+0x14>

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
